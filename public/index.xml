<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Shahrazad</title><link>https://shahrazad.fun/</link><description>Recent content on Shahrazad</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Wed, 23 Jul 2025 19:59:03 +0800</lastBuildDate><atom:link href="https://shahrazad.fun/index.xml" rel="self" type="application/rss+xml"/><item><title>Tagproductsdesign</title><link>https://shahrazad.fun/archive/tagproductsdesign/</link><pubDate>Wed, 23 Jul 2025 19:59:03 +0800</pubDate><guid>https://shahrazad.fun/archive/tagproductsdesign/</guid><description>商品多标签筛选 + 游标分页设计方案（MySQL / PostgreSQL）✅ 问题背景 有 1000w 商品，每个商品 0~20 个标签。 希望实现一个橱窗接口：支持标签筛选</description></item><item><title>k8s</title><link>https://shahrazad.fun/archive/k8s/</link><pubDate>Tue, 22 Jul 2025 10:55:16 +0800</pubDate><guid>https://shahrazad.fun/archive/k8s/</guid><description>Kubernetes Web 服务部署架构总结一、Kubernetes 基本概念对比 概念 类型 作用 是否运行实体 属于控制面/数据面 Pod 最小运行单元 封装容器，提供统一网络/存储</description></item><item><title>赤とんぼ</title><link>https://shahrazad.fun/archive/red_dragonfly/</link><pubDate>Fri, 23 May 2025 14:06:42 +0800</pubDate><guid>https://shahrazad.fun/archive/red_dragonfly/</guid><description>1927年，日本一、社会与经济环境1. 昭和金融恐慌：经济崩盘的起点 1927 年日本爆发“昭和金融恐慌”，由于东京渡边银行濒临破产，引发连锁反应。 多家</description></item><item><title>二分查找</title><link>https://shahrazad.fun/archive/iv_algo-09-binary-search/</link><pubDate>Tue, 20 May 2025 19:23:26 +0800</pubDate><guid>https://shahrazad.fun/archive/iv_algo-09-binary-search/</guid><description>边界控制模版在此 特性 左闭右闭 [left, right] 左闭右开 [left, right) 最常见场景 更直观、易理解 STL/Java 中习惯 区间是否包含 right ✅ 包含 ❌ 不包含 终止条件 left &amp;lt;= right left &amp;lt; right 缩小右边界 right = mid</description></item><item><title>0/1背包</title><link>https://shahrazad.fun/archive/iv_algo-07-knapsack/</link><pubDate>Sun, 18 May 2025 18:19:41 +0800</pubDate><guid>https://shahrazad.fun/archive/iv_algo-07-knapsack/</guid><description/></item><item><title>并查集</title><link>https://shahrazad.fun/archive/iv_algo-06-dsu/</link><pubDate>Sun, 18 May 2025 17:38:41 +0800</pubDate><guid>https://shahrazad.fun/archive/iv_algo-06-dsu/</guid><description>并查集（Union Find）算法专题总结📌 并查集是什么？并查集（Disjoint Set Union，简称 DSU）是一种用于处理动态连通性问题的数据</description></item><item><title>系统设计之短视频评论系统（抖音）</title><link>https://shahrazad.fun/archive/iv_sd_4-vedio-comment-system/</link><pubDate>Sat, 17 May 2025 20:02:10 +0800</pubDate><guid>https://shahrazad.fun/archive/iv_sd_4-vedio-comment-system/</guid><description>高并发评论系统设计（短视频场景）本设计面向大厂系统设计面试，聚焦于高并发、热点控制、缓存机制、数据一致性、异步削峰、点赞与审核风控等核心能力</description></item><item><title>如何做到空调遥控器连续指令的顺序接收</title><link>https://shahrazad.fun/archive/htd100k_2025051610/</link><pubDate>Fri, 16 May 2025 10:41:11 +0800</pubDate><guid>https://shahrazad.fun/archive/htd100k_2025051610/</guid><description>空调遥控器如何保证指令顺序性？📌 问题背景空调遥控器通常使用红外通信发送控制指令给空调主机，用户可能会连续点击“温度+”或“温度−”。那么主机</description></item><item><title>系统设计之延时任务系统（schedulerX）</title><link>https://shahrazad.fun/archive/iv_sd_3-schedule-task-system/</link><pubDate>Wed, 14 May 2025 18:47:03 +0800</pubDate><guid>https://shahrazad.fun/archive/iv_sd_3-schedule-task-system/</guid><description>延迟任务系统设计总结文档 本文总结了一套高可用、高并发、支持秒级~天级延迟任务的系统设计方案。内容来源为一次系统性设计讨论，包含用户的完整设想</description></item><item><title>服务端面试之Network篇</title><link>https://shahrazad.fun/archive/iv_cs-network/</link><pubDate>Tue, 13 May 2025 11:07:47 +0800</pubDate><guid>https://shahrazad.fun/archive/iv_cs-network/</guid><description/></item><item><title>系统设计之关注/取关系统（微博）</title><link>https://shahrazad.fun/archive/iv_sd-2-following-system/</link><pubDate>Mon, 12 May 2025 18:05:31 +0800</pubDate><guid>https://shahrazad.fun/archive/iv_sd-2-following-system/</guid><description>系统设计题总结：关注 / 取关系统设计（模拟面试）一、题目背景与要求设计一个支持亿级用户的关注 / 取关系统，具备以下功能： 用户之间形成单向关注关系</description></item><item><title>系统设计之点赞系统（B站）</title><link>https://shahrazad.fun/archive/iv_sd-1-like-system/</link><pubDate>Mon, 12 May 2025 15:49:51 +0800</pubDate><guid>https://shahrazad.fun/archive/iv_sd-1-like-system/</guid><description>点赞系统设计全流程复盘（详细版） 面试岗位：资深 Golang 工程师 场景背景：短视频点赞系统设计，真实大厂高频题模拟 🌟 总体系统设计题目（入口问题）🧾 原始题</description></item><item><title>阿斯塔格菲鲁拉</title><link>https://shahrazad.fun/archive/iv_astaghfirullah/</link><pubDate>Wed, 07 May 2025 08:06:35 +0800</pubDate><guid>https://shahrazad.fun/archive/iv_astaghfirullah/</guid><description>الصبر مفتاح الفرج 题号 题目名 难度 次数 公司 LC-56 合并区间 Medium 8 华为, 字节, 小米, 快手, 百度, 美团, 腾讯, 阿里 LC-15 三数之和 Medium 7 华为, 字节, 小</description></item><item><title>项目总结</title><link>https://shahrazad.fun/archive/iv_amap-project/</link><pubDate>Tue, 06 May 2025 12:38:52 +0800</pubDate><guid>https://shahrazad.fun/archive/iv_amap-project/</guid><description>甲: 积分兑换系统全景总结（含同步与异步版本对比、设计哲学） 里程兑换又上新了。真棒。又是怀念我J总、HB老板和H哥的一天。 系统关键目标 高并发下</description></item><item><title>工程系统之分布式事务</title><link>https://shahrazad.fun/archive/iv_engineering/</link><pubDate>Mon, 05 May 2025 14:20:54 +0800</pubDate><guid>https://shahrazad.fun/archive/iv_engineering/</guid><description>本地消息表实现跨库事务的链式一致性范式总结核心观点1. 本地消息表方案的本质是“链路分层 + 层间消息传递 + 每层自闭环” 每个服务或节点： 保证本地业</description></item><item><title>服务端面试之系统设计汇总篇</title><link>https://shahrazad.fun/archive/iv_sd-0-roadmap/</link><pubDate>Mon, 05 May 2025 12:23:42 +0800</pubDate><guid>https://shahrazad.fun/archive/iv_sd-0-roadmap/</guid><description>RoadMap：系统设计（资深后端开发岗位） 说明：高级/资深服务端开发，重点掌握系统设计逻辑与典型场景拆解，不深入运维与SRE方向。 鉴于我近</description></item><item><title>服务端面试之OS篇</title><link>https://shahrazad.fun/archive/iv_cs-os/</link><pubDate>Mon, 05 May 2025 10:03:45 +0800</pubDate><guid>https://shahrazad.fun/archive/iv_cs-os/</guid><description>模块 关键知识点 高频考察内容 是否必备 1. 进程与线程 进程与线程的区别、PCB/TCB、线程上下文切换 goroutine 与系统线程、协程调度机制对比 ✅ 2. 进程调度 调度</description></item><item><title>服务端面试之GO（二）</title><link>https://shahrazad.fun/archive/iv_cs-go-deep/</link><pubDate>Sun, 04 May 2025 12:26:32 +0800</pubDate><guid>https://shahrazad.fun/archive/iv_cs-go-deep/</guid><description>ROUND-1机制类 题号 类型 面试点核心 1️⃣ 机制题 为什么 map 遍历是乱序的？请描述 Go map 内部的 bucket 和扩容机制，为什么选择 lazy deletion？ 2️⃣ 机</description></item><item><title>服务端面试之GO（一）基础篇</title><link>https://shahrazad.fun/archive/iv_cs-go-base/</link><pubDate>Sun, 04 May 2025 10:07:32 +0800</pubDate><guid>https://shahrazad.fun/archive/iv_cs-go-base/</guid><description>Go 语言资深开发工程师）第一章总结：Go 语言语义与语言机制核心考点✅ 类型系统与值/引用行为📌 值类型 vs 引用类型 基本类型（int、float、st</description></item><item><title>服务端面试之缓存篇</title><link>https://shahrazad.fun/archive/iv_mid-redis/</link><pubDate>Sat, 03 May 2025 20:23:03 +0800</pubDate><guid>https://shahrazad.fun/archive/iv_mid-redis/</guid><description>Redis 核心数据结构与高性能原理一、Redis 为什么快？ 单线程模型：避免多线程加锁和上下文切换，基于事件循环 + epoll。 纯内存存储：数据全部在内</description></item><item><title>服务端面试之存储篇</title><link>https://shahrazad.fun/archive/iv_mid-mysql/</link><pubDate>Sat, 03 May 2025 16:57:36 +0800</pubDate><guid>https://shahrazad.fun/archive/iv_mid-mysql/</guid><description>Richard Phillips Feynman：学习-&amp;gt;教学-&amp;gt;纠错学习-&amp;gt;简化教学 I.执行流程小目录 SQL生命周期概览 解析阶段（Parse） 查询重写</description></item><item><title>贪心</title><link>https://shahrazad.fun/archive/iv_algo-05-greedy/</link><pubDate>Sat, 03 May 2025 10:03:45 +0800</pubDate><guid>https://shahrazad.fun/archive/iv_algo-05-greedy/</guid><description>贪心算法🧠 一、贪心的核心定义 贪心算法是一种在每一步都做出局部最优选择，最终期望获得全局最优解的方法。 使用前提： 必须满足「局部最优 = 全局最优」</description></item><item><title>动态规划</title><link>https://shahrazad.fun/archive/iv_algo-04-dp/</link><pubDate>Fri, 02 May 2025 14:31:16 +0800</pubDate><guid>https://shahrazad.fun/archive/iv_algo-04-dp/</guid><description/></item><item><title>回溯</title><link>https://shahrazad.fun/archive/iv_algo-03-dfs/</link><pubDate>Fri, 02 May 2025 10:02:12 +0800</pubDate><guid>https://shahrazad.fun/archive/iv_algo-03-dfs/</guid><description>回溯算法与 DFS 的系统总结 组合、排列、路径搜索 🧠 一、回溯和 DFS 的关系 特性 DFS 回溯（Backtracking） 本质 一种遍历方式 一种用 DFS 实现的“解空间搜</description></item></channel></rss>
<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on az1453</title>
    <link>https://anastagizeno.github.io/post/</link>
    <description>Recent content in Posts on az1453</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Copyright © 2019, Bingxing Kang. All rights reserved.</copyright>
    <lastBuildDate>Mon, 24 Jun 2019 10:41:55 +0800</lastBuildDate>
    
	<atom:link href="https://anastagizeno.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Notes for Using Asyncio in Py3</title>
      <link>https://anastagizeno.github.io/post/2019/06/notes-for-using-asyncio-in-py3/</link>
      <pubDate>Mon, 24 Jun 2019 10:41:55 +0800</pubDate>
      
      <guid>https://anastagizeno.github.io/post/2019/06/notes-for-using-asyncio-in-py3/</guid>
      <description>&lt;p&gt;Async Generators: yield Inside async def Functions
Async generators answer the question, “What happens if you use yield inside a native async def coroutine function?” This concept might be confusing if you have some experience with using generators as if they were coroutines, such as with the Twisted framework, or the Tornado framework, or even with yield from in Python 3.4’s asyncio.&lt;/p&gt;

&lt;p&gt;Therefore, before we continue in this section, it is best if you can convince yourself that:&lt;/p&gt;

&lt;p&gt;Coroutines and generators are completely different concepts.&lt;/p&gt;

&lt;p&gt;Async generators behave much like ordinary generators.&lt;/p&gt;

&lt;p&gt;For iteration, you use async for for async generators, instead of ordinary for for ordinary generators.&lt;/p&gt;

&lt;p&gt;The example used in the previous section to demonstrate an async iterator for interaction with Redis turns out to be much simpler if we set it up as an async generator:&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Read List Before Tokyo 2020</title>
      <link>https://anastagizeno.github.io/post/2019/06/read-list-before-tokyo-2020/</link>
      <pubDate>Fri, 21 Jun 2019 14:14:29 +0800</pubDate>
      
      <guid>https://anastagizeno.github.io/post/2019/06/read-list-before-tokyo-2020/</guid>
      <description>&lt;p&gt;Cut out summary from your post content here.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Using Asyncio in Python3</title>
      <link>https://anastagizeno.github.io/post/2019/06/using-asyncio-in-python3/</link>
      <pubDate>Thu, 20 Jun 2019 17:21:03 +0800</pubDate>
      
      <guid>https://anastagizeno.github.io/post/2019/06/using-asyncio-in-python3/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://learning.oreilly.com/library/view/using-asyncio-in/9781491999691/&#34;&gt;Using Asyncio in Python 3&lt;/a&gt; &lt;code&gt;by Caleb Hattingh Publisher: O&#39;Reilly Media, Inc. ISBN: 9781491999684&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;My story is a lot like yours, only more interesting ’cause it involves robots.&lt;/p&gt;

&lt;p&gt;Bender, Futurama episode “30% Iron Chef”&lt;/p&gt;

&lt;p&gt;The most common question I receive about Asyncio in Python 3 is this: “What is it, and what do I do with it?” The following story provides a backdrop for answering these questions. The central focus of Asyncio is about how to best perform multiple concurrent tasks at the same time. And not just any sort of tasks, but specifically tasks that involve waiting periods. The key insight required with this style of programming is that while you wait for this task to complete, work on other tasks can be performed.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Watch List Before Tokyo </title>
      <link>https://anastagizeno.github.io/post/2019/06/watch-list-before-tokyo/</link>
      <pubDate>Wed, 12 Jun 2019 17:39:14 +0800</pubDate>
      
      <guid>https://anastagizeno.github.io/post/2019/06/watch-list-before-tokyo/</guid>
      <description>&lt;p&gt;&lt;em&gt;Nothing but just a video watch list to finish before 2020 Tokyo Olympic Game Opening ceremony&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You only need to know about seven functions to use asyncio [for everyday use].&lt;/p&gt;

&lt;p&gt;&amp;ndash; &lt;cite&gt;Yury Selivanov, author of PEP 492&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
  </channel>
</rss>